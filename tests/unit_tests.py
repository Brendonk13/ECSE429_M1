# SET UP
# terminal: pip install nose requests
# run runTodoManagerRestAPI-1.5.5.jar on localhost:4567

# to run all tests:
# terminal: nosetests --verbosity=2 tests    

from nose.tools import assert_true, assert_equal, assert_is_not_none, assert_list_equal
import requests

apiURL = 'http://localhost:4567/'

def test_API():
    # Send a request to the API server and store the response.
    response = requests.get(apiURL)

    # Confirm that the request-response cycle completed successfully.
    assert_true(response.ok)
    return


# for each endpoint: GET, POST, DELETE

# -------------- /todos -----------------------

def test_get_all_todos():
    endpoint = 'todos'
    response = requests.get(apiURL + endpoint)
    
    # default /todos api has 2 todos
    assert_true(response.ok)
    response_body = response.json()
    expected_response = [
        {"id": "2", "title": "file paperwork", "doneStatus": "false", "description": "", "tasksof": [{"id": "1"}], },
        {"id": "1","title": "scan paperwork","doneStatus": "false","description": "","tasksof": [{"id": "1"}],"categories": [{"id": "1"}],}
    ]
    assert_equal(len(response_body["todos"]), 2)
    assert_list_equal(response_body["todos"], expected_response)
    return

def test_get_todo_by_id():
    endpoint = 'todos/1'
    response = requests.get(apiURL + endpoint)

    assert(response.ok)
    response_body = response.json()
    expected_response = [
        {"id": "1","title": "scan paperwork","doneStatus": "false","description": "","tasksof": [{"id": "1"}],"categories": [{"id": "1"}],}
    ]
    assert_equal(len(response_body["todos"]), 1)
    assert_list_equal(response_body["todos"], expected_response)
    return

def test_post_todo():
    endpoint = 'todos'
    test_todo = {"title": "unit tests","description": "create unit tests for ECSE429 project" }

    response = requests.post(apiURL + endpoint, json=test_todo)
    # assert that it is posted at /todos
    assert(response.ok)
    assert_equal(response.status_code, 201) # new todo created
    response_body = response.json()
    assert_equal(response_body["title"], "unit tests")
    assert_equal(response_body["description"], "create unit tests for ECSE429 project")
    assert_equal(response_body["doneStatus"], 'false') # false done status on default creation
    
    #assert that new todo is also posed at /todos/id
    new_id = response_body["id"]
    response_by_id = requests.get(apiURL + endpoint + '/' + new_id)
    assert(response_by_id.ok)
    response_body_by_id = response.json()
    assert_equal(response_body_by_id["id"], new_id)
    assert_equal(response_body_by_id ["title"], "unit tests")
    assert_equal(response_body_by_id ["description"], "create unit tests for ECSE429 project")
    assert_equal(response_body_by_id ["doneStatus"], 'false')
    
    # delete new todo that was created
    r = requests.delete(apiURL + endpoint + '/' + new_id)
    assert(r.ok)
    return

def test_post_invalid_todo():
    # the API does not allow creating a todo with an ID
    # all IDs are autogenerated
    endpoint = 'todos'
    test_todo_invalid = {"id": 1234, "title": "invalid todo","description": "should not be able to create todo with id" }

    response = requests.post(apiURL + endpoint, json=test_todo_invalid)
    response_body = response.json()
    # assert error message
    assert_equal(response.status_code, 400) # 400 bad request
    assert_equal(response_body["errorMessages"], ["Invalid Creation: Failed Validation: Not allowed to create with id"])
    return

def test_delete_todo_by_id():
    endpoint = 'todos'

    # create a new todo
    test_todo = {"title": "unit tests","description": "create unit tests for ECSE429 project" }
    response_post= requests.post(apiURL + endpoint, json=test_todo)
    assert(response_post.ok)
    
    # number of todos before delete
    r = requests.get(apiURL + endpoint).json()
    num = len(r["todos"])

    # delete it
    new_id = response_post.json()["id"]
    response_delete = requests.delete(apiURL + endpoint + '/' + new_id)
    assert(response_delete.ok)

    #assert that it is gone from the todos endpoint and its previous /todos/id endpoint
    r = requests.get(apiURL + endpoint).json()
    assert_equal(num - 1, len(r["todos"]))
    r = requests.get(apiURL + endpoint + '/' + new_id)
    assert_equal(r.status_code, 404) # 404 not found since it was deleted
    return

def test_get_todo_categories():
    return

def test_post_todo_link_category():
    return

def test_delete_todo_link_category():
    return

def test_get_todo_projects():
    endpoint= 'todos/id/tasksof'
    return

def test_post_todo_link_project():
    endpoint = 'todos/id/tasksof'
    return

def test_delete_todo_link_project():
    return



# -------------- /projects --------------------
def test_get_all_projects():
    return

def test_get_project_by_id():
    return

def test_post_project():
    return

def test_post_invalid_project():
    return

def test_delete_project_by_id():
    return

def test_delete_project_with_tasks():
    #deleting a project that has tasks should not delete the task
    return

def test_get_project_todos():
    #get the tasks associated to a project
    return

def test_get_project_categories():
    endpoint = '/projects/:id/categories'
    return

def test_post_project_link_category():
    #create a link between a project and a category (that exists or doesnt exist)
    return


# -------------- /categories ------------------
def test_get_all_categories():
    return

def test_get_category_by_id():
    return

def test_post_category():
    return

def test_delete_category_by_id():
    return

def test_get_category_projects():
    return

def test_post_category_project():
    return

def test_delete_category_project():
    return

def test_get_category_todos():
    endpoint = 'categories/id/todos/id'
    return

def test_post_category_todos():
    return

def test_delete_category_todos():
    return

# -------------- /docs----------------------
def test_docs():
    endpoint = 'docs'
    return

# ------------ /shutdown --------------------
def test_shutdown():
    return